//go:build windows
// +build windows

package winjob

import (
	"github.com/kolesnikovae/go-winjob/jobapi"
)

// WithOutgoingBandwidthLimit sets the maximum bandwidth for outgoing
// network traffic for the job, in bytes.
func WithOutgoingBandwidthLimit(b uint64) Limit {
	return LimitOutgoingBandwidth.WithValue(b)
}

// WithDSCPTag sets the value to use for the Differentiated Service code
// point (DSCP) field to turn on network quality of service (QoS) for all
// outgoing network traffic generated by the processes of the job object.
// The valid range is from 0x00 through 0x3F.
func WithDSCPTag(t byte) Limit {
	return LimitDSCPTag.WithValue(t)
}

var LimitOutgoingBandwidth netBandwidthLimit

var LimitDSCPTag netDSCPTagLimit

type netBandwidthLimit struct {
	maxBandwidth uint64
}

func (l netBandwidthLimit) WithValue(x uint64) netBandwidthLimit {
	l.maxBandwidth = x
	return l
}

func (l netBandwidthLimit) LimitValue(job *JobObject) uint64 {
	return job.NetRateControl.MaxBandwidth
}

func (l netBandwidthLimit) set(job *JobObject) {
	job.NetRateControl.MaxBandwidth = l.maxBandwidth
	f := jobapi.JOB_OBJECT_NET_RATE_CONTROL_ENABLE | jobapi.JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH
	job.NetRateControl.ControlFlags |= f
}

func (l netBandwidthLimit) reset(job *JobObject) {
	job.NetRateControl.ControlFlags &^= jobapi.JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH
	if job.NetRateControl.ControlFlags == jobapi.JOB_OBJECT_NET_RATE_CONTROL_ENABLE {
		job.NetRateControl.ControlFlags = 0
	}
}

func (l netBandwidthLimit) IsSet(job *JobObject) bool {
	return job.NetRateControl.ControlFlags&jobapi.JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH > 0
}

func (l netBandwidthLimit) Value(job *JobObject) interface{} {
	return l.LimitValue(job)
}

type netDSCPTagLimit struct {
	dscpTag byte
}

func (l netDSCPTagLimit) WithValue(t byte) netDSCPTagLimit {
	l.dscpTag = t
	return l
}

func (l netDSCPTagLimit) LimitValue(job *JobObject) byte {
	return job.NetRateControl.DscpTag
}

func (l netDSCPTagLimit) set(job *JobObject) {
	job.NetRateControl.DscpTag = l.dscpTag
	f := jobapi.JOB_OBJECT_NET_RATE_CONTROL_ENABLE | jobapi.JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG
	job.NetRateControl.ControlFlags |= f
}

func (l netDSCPTagLimit) reset(job *JobObject) {
	job.NetRateControl.ControlFlags &^= jobapi.JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG
	if job.NetRateControl.ControlFlags == jobapi.JOB_OBJECT_NET_RATE_CONTROL_ENABLE {
		job.NetRateControl.ControlFlags = 0
	}
}

func (l netDSCPTagLimit) IsSet(job *JobObject) bool {
	return job.NetRateControl.ControlFlags&jobapi.JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG > 0
}

func (l netDSCPTagLimit) Value(job *JobObject) interface{} {
	return l.LimitValue(job)
}
